//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/InputActions/InputManagerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManagerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManagerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManagerActions"",
    ""maps"": [
        {
            ""name"": ""Input"",
            ""id"": ""b62e3541-b925-4faa-a90c-c3b8e11bdf45"",
            ""actions"": [
                {
                    ""name"": ""AddNewDevice"",
                    ""type"": ""Button"",
                    ""id"": ""292110bf-82a2-4c45-9976-e199579e1f91"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DivideKeyboard"",
                    ""type"": ""Button"",
                    ""id"": ""66ab6cc5-5a73-4582-9829-aafc2eec923f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7bf8342b-45b0-4b48-aea4-7c290143ed24"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddNewDevice"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0552360-a7e4-4539-8c3b-263cc8a06684"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddNewDevice"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d17e59ce-7b7f-4400-9bdc-958086981af9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DivideKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Input
        m_Input = asset.FindActionMap("Input", throwIfNotFound: true);
        m_Input_AddNewDevice = m_Input.FindAction("AddNewDevice", throwIfNotFound: true);
        m_Input_DivideKeyboard = m_Input.FindAction("DivideKeyboard", throwIfNotFound: true);
    }

    ~@InputManagerActions()
    {
        UnityEngine.Debug.Assert(!m_Input.enabled, "This will cause a leak and performance issues, InputManagerActions.Input.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Input
    private readonly InputActionMap m_Input;
    private List<IInputActions> m_InputActionsCallbackInterfaces = new List<IInputActions>();
    private readonly InputAction m_Input_AddNewDevice;
    private readonly InputAction m_Input_DivideKeyboard;
    public struct InputActions
    {
        private @InputManagerActions m_Wrapper;
        public InputActions(@InputManagerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @AddNewDevice => m_Wrapper.m_Input_AddNewDevice;
        public InputAction @DivideKeyboard => m_Wrapper.m_Input_DivideKeyboard;
        public InputActionMap Get() { return m_Wrapper.m_Input; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputActions set) { return set.Get(); }
        public void AddCallbacks(IInputActions instance)
        {
            if (instance == null || m_Wrapper.m_InputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputActionsCallbackInterfaces.Add(instance);
            @AddNewDevice.started += instance.OnAddNewDevice;
            @AddNewDevice.performed += instance.OnAddNewDevice;
            @AddNewDevice.canceled += instance.OnAddNewDevice;
            @DivideKeyboard.started += instance.OnDivideKeyboard;
            @DivideKeyboard.performed += instance.OnDivideKeyboard;
            @DivideKeyboard.canceled += instance.OnDivideKeyboard;
        }

        private void UnregisterCallbacks(IInputActions instance)
        {
            @AddNewDevice.started -= instance.OnAddNewDevice;
            @AddNewDevice.performed -= instance.OnAddNewDevice;
            @AddNewDevice.canceled -= instance.OnAddNewDevice;
            @DivideKeyboard.started -= instance.OnDivideKeyboard;
            @DivideKeyboard.performed -= instance.OnDivideKeyboard;
            @DivideKeyboard.canceled -= instance.OnDivideKeyboard;
        }

        public void RemoveCallbacks(IInputActions instance)
        {
            if (m_Wrapper.m_InputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputActions instance)
        {
            foreach (var item in m_Wrapper.m_InputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputActions @Input => new InputActions(this);
    public interface IInputActions
    {
        void OnAddNewDevice(InputAction.CallbackContext context);
        void OnDivideKeyboard(InputAction.CallbackContext context);
    }
}
